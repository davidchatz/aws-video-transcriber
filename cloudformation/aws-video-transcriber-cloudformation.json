{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Deploys the AWS Video Transcriber Application",
  "Resources": {
    "ExtractAudioLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/prod-aws-captions-extractaudio",
        "RetentionInDays": 7
      }
    },
    "TranscribeAudioLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/prod-aws-captions-transcribeaudio",
        "RetentionInDays": 7
      }
    },
    "CreateCaptionsLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/prod-aws-captions-createcaptions",
        "RetentionInDays": 7
      }
    },
    "GetVideosLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/prod-aws-captions-getvideos",
        "RetentionInDays": 7
      }
    },
    "GetVideoLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/prod-aws-captions-getvideo",
        "RetentionInDays": 7
      }
    },
    "UpdateVideoStatusLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/prod-aws-captions-updatevideostatus",
        "RetentionInDays": 7
      }
    },
    "UpdateVideoNameLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/prod-aws-captions-updatevideoname",
        "RetentionInDays": 7
      }
    },
    "UpdateVideoDescriptionLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/prod-aws-captions-updatevideodescription",
        "RetentionInDays": 7
      }
    },
    "DeleteVideoLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/prod-aws-captions-deletevideo",
        "RetentionInDays": 7
      }
    },
    "ReprocessVideoLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/prod-aws-captions-reprocessvideo",
        "RetentionInDays": 7
      }
    },
    "GetUploadLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/prod-aws-captions-getupload",
        "RetentionInDays": 7
      }
    },
    "PutCaptionLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/prod-aws-captions-putcaption",
        "RetentionInDays": 7
      }
    },
    "GetCaptionLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/prod-aws-captions-getcaption",
        "RetentionInDays": 7
      }
    },
    "GetVocabularyLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/prod-aws-captions-getvocabulary",
        "RetentionInDays": 7
      }
    },
    "HeadVocabularyLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/prod-aws-captions-headvocabulary",
        "RetentionInDays": 7
      }
    },
    "PutVocabularyLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/prod-aws-captions-putvocabulary",
        "RetentionInDays": 7
      }
    },
    "GetTweaksLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/prod-aws-captions-gettweaks",
        "RetentionInDays": 7
      }
    },
    "PutTweaksLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/prod-aws-captions-puttweaks",
        "RetentionInDays": 7
      }
    },
    "BootStrapLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/prod-aws-captions-bootstrap",
        "RetentionInDays": 7
      }
    },
    "CustomResourceLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/prod-aws-captions-customresource",
        "RetentionInDays": 7
      }
    },
    "ExtractAudioLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Join": [ "", [ "aws-captions-deployment-", { "Ref": "AWS::Region" } ] ]
          },
          "S3Key": "lambda/ExtractAudio.zip"
        },
        "FunctionName": "prod-aws-captions-extractaudio",
        "Handler": "lambda/extractaudio.handler",
        "MemorySize": 128,
        "Role": {
          "Fn::GetAtt": [
            "LambdaRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs8.10",
        "Timeout": 15,
        "TracingConfig": {
          "Mode": {
            "Ref": "Trace"
          }
        },
        "Description": "Uses Elastic Transcoder to extract MP3 audio and produce web friendly MP4 from input videos",
        "Environment": {
          "Variables": {
            "INPUT_BUCKET": {
              "Fn::Join": [
                "",
                [
                  "prod-aws-captions-video-",
                  {
                    "Ref": "AWS::Region"
                  },
                  "-",
                  {
                    "Ref": "AWS::AccountId"
                  }
                ]
              ]
            },
            "OUTPUT_AUDIO_BUCKET": {
              "Fn::Join": [
                "",
                [
                  "prod-aws-captions-audio-",
                  {
                    "Ref": "AWS::Region"
                  },
                  "-",
                  {
                    "Ref": "AWS::AccountId"
                  }
                ]
              ]
            },
            "OUTPUT_VIDEO_BUCKET": {
              "Fn::Join": [
                "",
                [
                  "prod-aws-captions-video-",
                  {
                    "Ref": "AWS::Region"
                  },
                  "-",
                  {
                    "Ref": "AWS::AccountId"
                  }
                ]
              ]
            },
            "OUTPUT_AUDIO_KEY_PREFIX": "audio",
            "OUTPUT_VIDEO_KEY_PREFIX": "transcoded",
            "TRANSCODER_AUDIO_PIPELINE_NAME": "prod-aws-captions-extractaudio",
            "TRANSCODER_VIDEO_PIPELINE_NAME": "prod-aws-captions-transcodevideo",
            "TRANSCODER_ROLE": { "Fn::GetAtt" : [ "TranscoderRole", "Arn"] },
            "DYNAMO_VIDEO_TABLE": {
              "Ref": "VideoDynamoDBTable"
            },
            "REGION": {
              "Ref": "AWS::Region"
            }
          }
        }
      },
      "DependsOn": [
        "ExtractAudioLogGroup",
        "LambdaRole"
      ]
    },
    "ExtractAudioLambdaVersionHoIoKyGTpjSUAevCy27OgyyeNdD5qBHoDRF5vqB18": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "ExtractAudioLambdaFunction"
        },
        "CodeSha256": "oUB/BRh0AiaLBTNEFGgKcZRYol1YKz7yFhqUkqJnekU=",
        "Description": "Uses Elastic Transcoder to extract MP3 audio and produce web friendly MP4 from input videos"
      }
    },
    "TranscribeAudioLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Join": [ "", [ "aws-captions-deployment-", { "Ref": "AWS::Region" } ] ]
          },
          "S3Key": "lambda/TranscribeAudio.zip"
        },
        "FunctionName": "prod-aws-captions-transcribeaudio",
        "Handler": "lambda/transcribeaudio.handler",
        "MemorySize": 128,
        "Role": {
          "Fn::GetAtt": [
            "LambdaRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs8.10",
        "Timeout": 15,
        "TracingConfig": {
          "Mode": {
            "Ref": "Trace"
          }
        },
        "Description": "Uses Transcribe to extract text from audio",
        "Environment": {
          "Variables": {
            "OUTPUT_BUCKET": {
              "Fn::Join": [
                "",
                [
                  "prod-aws-captions-transcribe-",
                  {
                    "Ref": "AWS::Region"
                  },
                  "-",
                  {
                    "Ref": "AWS::AccountId"
                  }
                ]
              ]
            },
            "OUTPUT_KEY_PREFIX": "transcribe",
            "DYNAMO_VIDEO_TABLE": {
              "Ref": "VideoDynamoDBTable"
            },
            "REGION": {
              "Ref": "AWS::Region"
            },
            "VOCABULARY_NAME": {
              "Fn::Join": [
                "",
                [
                  "prod-aws-captions-",
                  {
                    "Ref": "TranscribeLanguage"
                  }
                ]
              ]
            },
            "TRANSCRIBE_LANGUAGE": {
              "Ref": "TranscribeLanguage"
            }
          }
        },
        "Layers": [
          {
            "Ref": "LambdaLayer"
          }
        ]
      },
      "DependsOn": [
        "TranscribeAudioLogGroup",
        "LambdaRole"
      ]
    },
    "TranscribeAudioLambdaVersionfDPI1YKTS1phJadWtDG5QZUd8H8D7mWeu5srlYPD0": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "TranscribeAudioLambdaFunction"
        },
        "CodeSha256": "3yrEPLyw2Bz8R96WcvmYrSpNdefjP8c9Q00LNarjWn8=",
        "Description": "Uses Transcribe to extract text from audio"
      }
    },
    "CreateCaptionsLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Join": [ "", [ "aws-captions-deployment-", { "Ref": "AWS::Region" } ] ]
          },
          "S3Key": "lambda/CreateCaptions.zip"
        },
        "FunctionName": "prod-aws-captions-createcaptions",
        "Handler": "lambda/createcaptions.handler",
        "MemorySize": 512,
        "Role": {
          "Fn::GetAtt": [
            "LambdaRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs8.10",
        "Timeout": 60,
        "TracingConfig": {
          "Mode": {
            "Ref": "Trace"
          }
        },
        "Description": "Creates captions for videos from transcription results",
        "Environment": {
          "Variables": {
            "INPUT_BUCKET": {
              "Fn::Join": [
                "",
                [
                  "prod-aws-captions-transcribe-",
                  {
                    "Ref": "AWS::Region"
                  },
                  "-",
                  {
                    "Ref": "AWS::AccountId"
                  }
                ]
              ]
            },
            "DYNAMO_VIDEO_TABLE": {
              "Ref": "VideoDynamoDBTable"
            },
            "DYNAMO_CAPTION_TABLE": {
              "Ref": "CaptionDynamoDBTable"
            },
            "DYNAMO_CONFIG_TABLE": {
              "Ref": "ConfigDynamoDBTable"
            },
            "REGION": {
              "Ref": "AWS::Region"
            }
          }
        }
      },
      "DependsOn": [
        "CreateCaptionsLogGroup",
        "LambdaRole"
      ]
    },
    "CreateCaptionsLambdaVersion4SoJADCHEKfIJuiNeMw9CbApuwjxlNf57G86t2KU18": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "CreateCaptionsLambdaFunction"
        },
        "CodeSha256": "4BthB25T0YyKBiHputY1BpABmPPXA7Y7zP1+rznCQ3A=",
        "Description": "Creates captions for videos from transcription results"
      }
    },
    "GetVideosLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Join": [ "", [ "aws-captions-deployment-", { "Ref": "AWS::Region" } ] ]
          },
          "S3Key": "lambda/GetVideos.zip"
        },
        "FunctionName": "prod-aws-captions-getvideos",
        "Handler": "lambda/getvideos.handler",
        "MemorySize": 128,
        "Role": {
          "Fn::GetAtt": [
            "LambdaRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs8.10",
        "Timeout": 29,
        "TracingConfig": {
          "Mode": {
            "Ref": "Trace"
          }
        },
        "Description": "Loads videos from DynamoDB",
        "Environment": {
          "Variables": {
            "DYNAMO_VIDEO_TABLE": {
              "Ref": "VideoDynamoDBTable"
            },
            "REGION": {
              "Ref": "AWS::Region"
            }
          }
        }
      },
      "DependsOn": [
        "GetVideosLogGroup",
        "LambdaRole"
      ]
    },
    "GetVideosLambdaVersionX0H2uc28l4NHgvBxEaHXF2Z3q2IXMZF64D7niwTG2Co": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetVideosLambdaFunction"
        },
        "CodeSha256": "32i3iv59wQwgK6UmwZQIlxPewR1SFeH8JZdlNosfMeM=",
        "Description": "Loads videos from DynamoDB"
      }
    },
    "GetVideoLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Join": [ "", [ "aws-captions-deployment-", { "Ref": "AWS::Region" } ] ]
          },
          "S3Key": "lambda/GetVideo.zip"
        },
        "FunctionName": "prod-aws-captions-getvideo",
        "Handler": "lambda/getvideo.handler",
        "MemorySize": 128,
        "Role": {
          "Fn::GetAtt": [
            "LambdaRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs8.10",
        "Timeout": 29,
        "TracingConfig": {
          "Mode": {
            "Ref": "Trace"
          }
        },
        "Description": "Loads a single video from DynamoDB",
        "Environment": {
          "Variables": {
            "DYNAMO_VIDEO_TABLE": {
              "Ref": "VideoDynamoDBTable"
            },
            "DYNAMO_CAPTION_TABLE": {
              "Ref": "CaptionDynamoDBTable"
            },
            "REGION": {
              "Ref": "AWS::Region"
            },
            "VIDEO_BUCKET": {
              "Fn::Join": [
                "",
                [
                  "prod-aws-captions-video-",
                  {
                    "Ref": "AWS::Region"
                  },
                  "-",
                  {
                    "Ref": "AWS::AccountId"
                  }
                ]
              ]
            }
          }
        }
      },
      "DependsOn": [
        "GetVideoLogGroup",
        "LambdaRole"
      ]
    },
    "GetVideoLambdaVersionrRXuy7cMMjsX07k5zRNCdP6WL7dBdMP9BH7iYJdkeaQ": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetVideoLambdaFunction"
        },
        "CodeSha256": "qBL0akQHhH24pcWHgfFgY3KmF8FW+4G9vnwiH4DjSRI=",
        "Description": "Loads a single video from DynamoDB"
      }
    },
    "UpdateVideoStatusLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Join": [ "", [ "aws-captions-deployment-", { "Ref": "AWS::Region" } ] ]
          },
          "S3Key": "lambda/UpdateVideoStatus.zip"
        },
        "FunctionName": "prod-aws-captions-updatevideostatus",
        "Handler": "lambda/updatevideostatus.handler",
        "MemorySize": 128,
        "Role": {
          "Fn::GetAtt": [
            "LambdaRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs8.10",
        "Timeout": 29,
        "TracingConfig": {
          "Mode": {
            "Ref": "Trace"
          }
        },
        "Description": "Updates the status of a video in DynamoDB",
        "Environment": {
          "Variables": {
            "DYNAMO_VIDEO_TABLE": {
              "Ref": "VideoDynamoDBTable"
            },
            "REGION": {
              "Ref": "AWS::Region"
            }
          }
        }
      },
      "DependsOn": [
        "UpdateVideoStatusLogGroup",
        "LambdaRole"
      ]
    },
    "UpdateVideoStatusLambdaVersionAUngzpNQgCroln6oo5fshC3R3HnnkZpUSpLN8awa0": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "UpdateVideoStatusLambdaFunction"
        },
        "CodeSha256": "GAbUxLEE7eDRbyRd93ZLhRqaIR+W86nxNVzzUrDlz3c=",
        "Description": "Updates the status of a video in DynamoDB"
      }
    },
    "UpdateVideoNameLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Join": [ "", [ "aws-captions-deployment-", { "Ref": "AWS::Region" } ] ]
          },
          "S3Key": "lambda/UpdateVideoName.zip"
        },
        "FunctionName": "prod-aws-captions-updatevideoname",
        "Handler": "lambda/updatevideoname.handler",
        "MemorySize": 128,
        "Role": {
          "Fn::GetAtt": [
            "LambdaRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs8.10",
        "Timeout": 29,
        "TracingConfig": {
          "Mode": {
            "Ref": "Trace"
          }
        },
        "Description": "Updates the name of a video in DynamoDB",
        "Environment": {
          "Variables": {
            "DYNAMO_VIDEO_TABLE": {
              "Ref": "VideoDynamoDBTable"
            },
            "REGION": {
              "Ref": "AWS::Region"
            }
          }
        }
      },
      "DependsOn": [
        "UpdateVideoNameLogGroup",
        "LambdaRole"
      ]
    },
    "UpdateVideoNameLambdaVersionGe0eS6LgYvfvxYEO352nbLks5JX93YmFc3KVGbuTkY": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "UpdateVideoNameLambdaFunction"
        },
        "CodeSha256": "GPlZhOWv0AMu70bF2ucFXJyr/AvF4zSsGAqlh0NOPO8=",
        "Description": "Updates the name of a video in DynamoDB"
      }
    },
    "UpdateVideoDescriptionLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Join": [ "", [ "aws-captions-deployment-", { "Ref": "AWS::Region" } ] ]
          },
          "S3Key": "lambda/UpdateVideoDescription.zip"
        },
        "FunctionName": "prod-aws-captions-updatevideodescription",
        "Handler": "lambda/updatevideodescription.handler",
        "MemorySize": 128,
        "Role": {
          "Fn::GetAtt": [
            "LambdaRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs8.10",
        "Timeout": 29,
        "TracingConfig": {
          "Mode": {
            "Ref": "Trace"
          }
        },
        "Description": "Updates the description of a video in DynamoDB",
        "Environment": {
          "Variables": {
            "DYNAMO_VIDEO_TABLE": {
              "Ref": "VideoDynamoDBTable"
            },
            "REGION": {
              "Ref": "AWS::Region"
            }
          }
        }
      },
      "DependsOn": [
        "UpdateVideoDescriptionLogGroup",
        "LambdaRole"
      ]
    },
    "UpdateVideoDescriptionLambdaVersionwyNV0X9JvR2Ox0zGKY0HrafJO0PGaTJ0jHavLi4Os8": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "UpdateVideoDescriptionLambdaFunction"
        },
        "CodeSha256": "bvFr12x5sWWKJhJqtkOEemdPLnQchwv9xCWAm3PLMjI=",
        "Description": "Updates the description of a video in DynamoDB"
      }
    },
    "DeleteVideoLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Join": [ "", [ "aws-captions-deployment-", { "Ref": "AWS::Region" } ] ]
          },
          "S3Key": "lambda/DeleteVideo.zip"
        },
        "FunctionName": "prod-aws-captions-deletevideo",
        "Handler": "lambda/deletevideo.handler",
        "MemorySize": 128,
        "Role": {
          "Fn::GetAtt": [
            "LambdaRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs8.10",
        "Timeout": 29,
        "TracingConfig": {
          "Mode": {
            "Ref": "Trace"
          }
        },
        "Description": "Purges a single video from the system",
        "Environment": {
          "Variables": {
            "REGION": {
              "Ref": "AWS::Region"
            },
            "DYNAMO_VIDEO_TABLE": {
              "Ref": "VideoDynamoDBTable"
            },
            "DYNAMO_CAPTION_TABLE": {
              "Ref": "CaptionDynamoDBTable"
            },
            "VIDEO_BUCKET": {
              "Fn::Join": [
                "",
                [
                  "prod-aws-captions-video-",
                  {
                    "Ref": "AWS::Region"
                  },
                  "-",
                  {
                    "Ref": "AWS::AccountId"
                  }
                ]
              ]
            },
            "AUDIO_BUCKET": {
              "Fn::Join": [
                "",
                [
                  "prod-aws-captions-audio-",
                  {
                    "Ref": "AWS::Region"
                  },
                  "-",
                  {
                    "Ref": "AWS::AccountId"
                  }
                ]
              ]
            },
            "TRANSCRIBE_BUCKET": {
              "Ref": "S3BucketTranscribe"
            }
          }
        },
        "Layers": [
          {
            "Ref": "LambdaLayer"
          }
        ]
      },
      "DependsOn": [
        "DeleteVideoLogGroup",
        "LambdaRole"
      ]
    },
    "DeleteVideoLambdaVersion1y6esUriaeUzkOvJFML06C5w660QgoocpU5669o0w": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "DeleteVideoLambdaFunction"
        },
        "CodeSha256": "KIZ+6k7o2/I0DMlt95eRAyePi0H6k+AI3ybhoyjJCiQ=",
        "Description": "Purges a single video from the system"
      }
    },
    "ReprocessVideoLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Join": [ "", [ "aws-captions-deployment-", { "Ref": "AWS::Region" } ] ]
          },
          "S3Key": "lambda/ReprocessVideo.zip"
        },
        "FunctionName": "prod-aws-captions-reprocessvideo",
        "Handler": "lambda/reprocessvideo.handler",
        "MemorySize": 128,
        "Role": {
          "Fn::GetAtt": [
            "LambdaRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs8.10",
        "Timeout": 29,
        "TracingConfig": {
          "Mode": {
            "Ref": "Trace"
          }
        },
        "Description": "Reprocesses a video",
        "Environment": {
          "Variables": {
            "REGION": {
              "Ref": "AWS::Region"
            },
            "DYNAMO_VIDEO_TABLE": {
              "Ref": "VideoDynamoDBTable"
            },
            "VIDEO_BUCKET": {
              "Fn::Join": [
                "",
                [
                  "prod-aws-captions-video-",
                  {
                    "Ref": "AWS::Region"
                  },
                  "-",
                  {
                    "Ref": "AWS::AccountId"
                  }
                ]
              ]
            },
            "AUDIO_BUCKET": {
              "Fn::Join": [
                "",
                [
                  "prod-aws-captions-audio-",
                  {
                    "Ref": "AWS::Region"
                  },
                  "-",
                  {
                    "Ref": "AWS::AccountId"
                  }
                ]
              ]
            },
            "TRANSCRIBE_BUCKET": {
              "Ref": "S3BucketTranscribe"
            },
            "EXTRACT_AUDIO_FUNCTION": "prod-aws-captions-extractaudio"
          }
        },
        "Layers": [
          {
            "Ref": "LambdaLayer"
          }
        ]
      },
      "DependsOn": [
        "ReprocessVideoLogGroup",
        "LambdaRole"
      ]
    },
    "ReprocessVideoLambdaVersione2hhQ4H4pJ80iYc9jvoTJD4nBBwlZs7cxuDjhq9yw": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "ReprocessVideoLambdaFunction"
        },
        "CodeSha256": "GdBN5toKsOl0Ngy23WBJ4VHWKkrHBXmPfMCMH22UZKk=",
        "Description": "Reprocesses a video"
      }
    },
    "GetUploadLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Join": [ "", [ "aws-captions-deployment-", { "Ref": "AWS::Region" } ] ]
          },
          "S3Key": "lambda/GetUpload.zip"
        },
        "FunctionName": "prod-aws-captions-getupload",
        "Handler": "lambda/getupload.handler",
        "MemorySize": 128,
        "Role": {
          "Fn::GetAtt": [
            "LambdaRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs8.10",
        "Timeout": 29,
        "TracingConfig": {
          "Mode": {
            "Ref": "Trace"
          }
        },
        "Description": "Fetches a signed URL for uploading video into S3",
        "Environment": {
          "Variables": {
            "REGION": {
              "Ref": "AWS::Region"
            },
            "VIDEO_BUCKET": {
              "Fn::Join": [
                "",
                [
                  "prod-aws-captions-video-",
                  {
                    "Ref": "AWS::Region"
                  },
                  "-",
                  {
                    "Ref": "AWS::AccountId"
                  }
                ]
              ]
            }
          }
        }
      },
      "DependsOn": [
        "GetUploadLogGroup",
        "LambdaRole"
      ]
    },
    "GetUploadLambdaVersionuZ3Y3x9IbMiMH3D1EwdLvCNNpZlLpoKI67ICdbyHA": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetUploadLambdaFunction"
        },
        "CodeSha256": "NttRxxconH+aWQH6fKOVVKsc1CjWgX8Fbo8HGjl/eB0=",
        "Description": "Fetches a signed URL for uploading video into S3"
      }
    },
    "PutCaptionLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Join": [ "", [ "aws-captions-deployment-", { "Ref": "AWS::Region" } ] ]
          },
          "S3Key": "lambda/PutCaption.zip"
        },
        "FunctionName": "prod-aws-captions-putcaption",
        "Handler": "lambda/putcaption.handler",
        "MemorySize": 128,
        "Role": {
          "Fn::GetAtt": [
            "LambdaRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs8.10",
        "Timeout": 29,
        "TracingConfig": {
          "Mode": {
            "Ref": "Trace"
          }
        },
        "Description": "Saves captions to DynamoDB",
        "Environment": {
          "Variables": {
            "DYNAMO_CAPTION_TABLE": {
              "Ref": "CaptionDynamoDBTable"
            },
            "REGION": {
              "Ref": "AWS::Region"
            }
          }
        }
      },
      "DependsOn": [
        "PutCaptionLogGroup",
        "LambdaRole"
      ]
    },
    "PutCaptionLambdaVersionA9XUFaIbQjsWtMJLERufoEOPOgHqEkZk1P4hjIFQMVs": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "PutCaptionLambdaFunction"
        },
        "CodeSha256": "nSPfxC8TD5dmQlXz9jBUk0PGAHXyaKogWoBGiXPhGhc=",
        "Description": "Saves captions to DynamoDB"
      }
    },
    "GetCaptionLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Join": [ "", [ "aws-captions-deployment-", { "Ref": "AWS::Region" } ] ]
          },
          "S3Key": "lambda/GetCaption.zip"
        },
        "FunctionName": "prod-aws-captions-getcaption",
        "Handler": "lambda/getcaption.handler",
        "MemorySize": 128,
        "Role": {
          "Fn::GetAtt": [
            "LambdaRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs8.10",
        "Timeout": 29,
        "TracingConfig": {
          "Mode": {
            "Ref": "Trace"
          }
        },
        "Description": "Fetches captions in WEBVTT format",
        "Environment": {
          "Variables": {
            "DYNAMO_CAPTION_TABLE": {
              "Ref": "CaptionDynamoDBTable"
            },
            "REGION": {
              "Ref": "AWS::Region"
            }
          }
        }
      },
      "DependsOn": [
        "GetCaptionLogGroup",
        "LambdaRole"
      ]
    },
    "GetCaptionLambdaVersionuP52RAac8NWGzEy1cZnU7TOfmStmZn7ajYtK4QztWEc": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetCaptionLambdaFunction"
        },
        "CodeSha256": "kv9lTU94A9e5xmcQiUgzefEr345TUUXO6IEuNWNiMD0=",
        "Description": "Fetches captions in WEBVTT format"
      }
    },
    "GetVocabularyLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Join": [ "", [ "aws-captions-deployment-", { "Ref": "AWS::Region" } ] ]
          },
          "S3Key": "lambda/GetVocabulary.zip"
        },
        "FunctionName": "prod-aws-captions-getvocabulary",
        "Handler": "lambda/getvocabulary.handler",
        "MemorySize": 128,
        "Role": {
          "Fn::GetAtt": [
            "LambdaRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs8.10",
        "Timeout": 29,
        "TracingConfig": {
          "Mode": {
            "Ref": "Trace"
          }
        },
        "Description": "Loads vocabulary from DynamoDB",
        "Environment": {
          "Variables": {
            "DYNAMO_CONFIG_TABLE": {
              "Ref": "ConfigDynamoDBTable"
            },
            "REGION": {
              "Ref": "AWS::Region"
            },
            "VOCABULARY_NAME": {
              "Fn::Join": [
                "",
                [
                  "prod-aws-captions-",
                  {
                    "Ref": "TranscribeLanguage"
                  }
                ]
              ]
            }
          }
        }
      },
      "DependsOn": [
        "GetVocabularyLogGroup",
        "LambdaRole"
      ]
    },
    "GetVocabularyLambdaVersionCYfCKHfzvPaQUq0MrCFMvU652W90qtI08KTwFRmLX0": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetVocabularyLambdaFunction"
        },
        "CodeSha256": "OhSkrimyJCPGrOE5PoRjY53QxwcuaI6OhA0jYviFIU8=",
        "Description": "Loads vocabulary from DynamoDB"
      }
    },
    "HeadVocabularyLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Join": [ "", [ "aws-captions-deployment-", { "Ref": "AWS::Region" } ] ]
          },
          "S3Key": "lambda/HeadVocabulary.zip"
        },
        "FunctionName": "prod-aws-captions-headvocabulary",
        "Handler": "lambda/headvocabulary.handler",
        "MemorySize": 128,
        "Role": {
          "Fn::GetAtt": [
            "LambdaRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs8.10",
        "Timeout": 29,
        "TracingConfig": {
          "Mode": {
            "Ref": "Trace"
          }
        },
        "Description": "Checks if vocabulary is ready to save",
        "Environment": {
          "Variables": {
            "REGION": {
              "Ref": "AWS::Region"
            },
            "VOCABULARY_NAME": {
              "Fn::Join": [
                "",
                [
                  "prod-aws-captions-",
                  {
                    "Ref": "TranscribeLanguage"
                  }
                ]
              ]
            }
          }
        }
      },
      "DependsOn": [
        "HeadVocabularyLogGroup",
        "LambdaRole"
      ]
    },
    "HeadVocabularyLambdaVersionv1x5zIxjWSq8isYdDduYXEPxfKxJ4Jpq4lfejG5pWE": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "HeadVocabularyLambdaFunction"
        },
        "CodeSha256": "kJ+tqS5GW5aN9wSy7gRFdwbldmdIzc0CFEyQ59DjWFk=",
        "Description": "Checks if vocabulary is ready to save"
      }
    },
    "PutVocabularyLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Join": [ "", [ "aws-captions-deployment-", { "Ref": "AWS::Region" } ] ]
          },
          "S3Key": "lambda/PutVocabulary.zip"
        },
        "FunctionName": "prod-aws-captions-putvocabulary",
        "Handler": "lambda/putvocabulary.handler",
        "MemorySize": 128,
        "Role": {
          "Fn::GetAtt": [
            "LambdaRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs8.10",
        "Timeout": 29,
        "TracingConfig": {
          "Mode": {
            "Ref": "Trace"
          }
        },
        "Description": "Saves vocabulary to DynamoDB",
        "Environment": {
          "Variables": {
            "DYNAMO_CONFIG_TABLE": {
              "Ref": "ConfigDynamoDBTable"
            },
            "REGION": {
              "Ref": "AWS::Region"
            },
            "VOCABULARY_NAME": {
              "Fn::Join": [
                "",
                [
                  "prod-aws-captions-",
                  {
                    "Ref": "TranscribeLanguage"
                  }
                ]
              ]
            },
            "TRANSCRIBE_LANGUAGE": {
              "Ref": "TranscribeLanguage"
            }
          }
        }
      },
      "DependsOn": [
        "PutVocabularyLogGroup",
        "LambdaRole"
      ]
    },
    "PutVocabularyLambdaVersioncD5LPLgGj3j9F833fW0ZHGXnWPjsyMgK7Rdn3AOq9Jo": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "PutVocabularyLambdaFunction"
        },
        "CodeSha256": "XnLZkHqnWXXMl009rgdfMgRtEhXfd34+sbMKxrRD+vQ=",
        "Description": "Saves vocabulary to DynamoDB"
      }
    },
    "GetTweaksLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Join": [ "", [ "aws-captions-deployment-", { "Ref": "AWS::Region" } ] ]
          },
          "S3Key": "lambda/GetTweaks.zip"
        },
        "FunctionName": "prod-aws-captions-gettweaks",
        "Handler": "lambda/gettweaks.handler",
        "MemorySize": 128,
        "Role": {
          "Fn::GetAtt": [
            "LambdaRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs8.10",
        "Timeout": 29,
        "TracingConfig": {
          "Mode": {
            "Ref": "Trace"
          }
        },
        "Description": "Loads tweaks from DynamoDB",
        "Environment": {
          "Variables": {
            "DYNAMO_CONFIG_TABLE": {
              "Ref": "ConfigDynamoDBTable"
            },
            "REGION": {
              "Ref": "AWS::Region"
            }
          }
        }
      },
      "DependsOn": [
        "GetTweaksLogGroup",
        "LambdaRole"
      ]
    },
    "GetTweaksLambdaVersionYHJChENz2cj1usyotToaOB6HDPaWwnIemFYSAGns0g": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetTweaksLambdaFunction"
        },
        "CodeSha256": "i5OVHa/4ds8xhvFLqA7XxUVTOK98+lOsbXFna7nvKjU=",
        "Description": "Loads tweaks from DynamoDB"
      }
    },
    "PutTweaksLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Join": [ "", [ "aws-captions-deployment-", { "Ref": "AWS::Region" } ] ]
          },
          "S3Key": "lambda/PutTweaks.zip"
        },
        "FunctionName": "prod-aws-captions-puttweaks",
        "Handler": "lambda/puttweaks.handler",
        "MemorySize": 128,
        "Role": {
          "Fn::GetAtt": [
            "LambdaRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs8.10",
        "Timeout": 29,
        "TracingConfig": {
          "Mode": {
            "Ref": "Trace"
          }
        },
        "Description": "Saves tweaks to DynamoDB",
        "Environment": {
          "Variables": {
            "DYNAMO_CONFIG_TABLE": {
              "Ref": "ConfigDynamoDBTable"
            },
            "REGION": {
              "Ref": "AWS::Region"
            }
          }
        }
      },
      "DependsOn": [
        "PutTweaksLogGroup",
        "LambdaRole"
      ]
    },
    "PutTweaksLambdaVersionkZ3moO6o1KGHlPP5kleSi9x5KNiNglN2pK83JfYQ": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "PutTweaksLambdaFunction"
        },
        "CodeSha256": "5HZCXjvnI+02VMogYv/1leMTcTWzYHPSVNlc8fQRajs=",
        "Description": "Saves tweaks to DynamoDB"
      }
    },
    "BootStrapLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Join": [ "", [ "aws-captions-deployment-", { "Ref": "AWS::Region" } ] ]
          },
          "S3Key": "lambda/BootStrap.zip"
        },
        "FunctionName": "prod-aws-captions-bootstrap",
        "Handler": "lambda/bootstrap.handler",
        "MemorySize": 2048,
        "Role": {
          "Fn::GetAtt": [
            "LambdaRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs8.10",
        "Timeout": 900,
        "TracingConfig": {
          "Mode": {
            "Ref": "Trace"
          }
        },
        "Description": "Bootstraps videos to process into S3",
        "Environment": {
          "Variables": {
            "OUTPUT_BUCKET": {
              "Fn::Join": [
                "",
                [
                  "prod-aws-captions-video-",
                  {
                    "Ref": "AWS::Region"
                  },
                  "-",
                  {
                    "Ref": "AWS::AccountId"
                  }
                ]
              ]
            },
            "REGION": {
              "Ref": "AWS::Region"
            }
          }
        }
      },
      "DependsOn": [
        "BootStrapLogGroup",
        "LambdaRole"
      ]
    },
    "BootStrapLambdaVersion9iE32BCTqoDJV8b94HBTQutBU69G5hPYS85OVVQAkM": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "BootStrapLambdaFunction"
        },
        "CodeSha256": "idvYmtv8dHaXcBi55TsBkv62WbIF8H9YAdRhZlHh87k=",
        "Description": "Bootstraps videos to process into S3"
      }
    },
    "CustomResourceLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Join": [ "", [ "aws-captions-deployment-", { "Ref": "AWS::Region" } ] ]
          },
          "S3Key": "lambda/CustomResource.zip"
        },
        "FunctionName": "prod-aws-captions-customresource",
        "Handler": "lambda/customresource.handler",
        "MemorySize": 128,
        "Role": {
          "Fn::GetAtt": [
            "LambdaRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs8.10",
        "Timeout": 600,
        "TracingConfig": {
          "Mode": {
            "Ref": "Trace"
          }
        },
        "Description": "Performs custom cloudformation initialisation"
      },
      "DependsOn": [
        "CustomResourceLogGroup",
        "LambdaRole"
      ]
    },
    "CustomResourceLambdaVersionLLfyu1UN75XiQ0aqS9wXdre6LKWVy4O3wR3ArsK1qY": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "CustomResourceLambdaFunction"
        },
        "CodeSha256": "9k9ZX52kmtUtkmyI7SAUlcpzNIhJCK7Cfn7uxwRNFRo=",
        "Description": "Performs custom cloudformation initialisation"
      }
    },
    "S3BucketVideo": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketName": {
          "Fn::Join": [
            "",
            [
              "prod-aws-captions-video-",
              {
                "Ref": "AWS::Region"
              },
              "-",
              {
                "Ref": "AWS::AccountId"
              }
            ]
          ]
        },
        "NotificationConfiguration": {
          "LambdaConfigurations": [
            {
              "Event": "s3:ObjectCreated:*",
              "Function": {
                "Fn::GetAtt": [
                  "ExtractAudioLambdaFunction",
                  "Arn"
                ]
              },
              "Filter": {
                "S3Key": {
                  "Rules": [
                    {
                      "Name": "prefix",
                      "Value": "videos/"
                    }
                  ]
                }
              }
            }
          ]
        },
        "CorsConfiguration": {
          "CorsRules": [
            {
              "AllowedOrigins": [
                "*"
              ],
              "AllowedHeaders": [
                "*"
              ],
              "AllowedMethods": [
                "PUT",
                "POST",
                "GET"
              ],
              "MaxAge": 3000
            }
          ]
        }
      },
      "DependsOn": [
        "ExtractAudioLambdaPermissionVideoS3"
      ]
    },
    "S3BucketAudio": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketName": {
          "Fn::Join": [
            "",
            [
              "prod-aws-captions-audio-",
              {
                "Ref": "AWS::Region"
              },
              "-",
              {
                "Ref": "AWS::AccountId"
              }
            ]
          ]
        },
        "NotificationConfiguration": {
          "LambdaConfigurations": [
            {
              "Event": "s3:ObjectCreated:*",
              "Function": {
                "Fn::GetAtt": [
                  "TranscribeAudioLambdaFunction",
                  "Arn"
                ]
              },
              "Filter": {
                "S3Key": {
                  "Rules": [
                    {
                      "Name": "prefix",
                      "Value": "audio/"
                    },
                    {
                      "Name": "suffix",
                      "Value": ".mp3"
                    }
                  ]
                }
              }
            }
          ]
        }
      },
      "DependsOn": [
        "TranscribeAudioLambdaPermissionAudioS3"
      ]
    },
    "S3BucketTranscribe": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketName": {
          "Fn::Join": [
            "",
            [
              "prod-aws-captions-transcribe-",
              {
                "Ref": "AWS::Region"
              },
              "-",
              {
                "Ref": "AWS::AccountId"
              }
            ]
          ]
        },
        "NotificationConfiguration": {
          "LambdaConfigurations": [
            {
              "Event": "s3:ObjectCreated:*",
              "Function": {
                "Fn::GetAtt": [
                  "CreateCaptionsLambdaFunction",
                  "Arn"
                ]
              },
              "Filter": {
                "S3Key": {
                  "Rules": [
                    {
                      "Name": "suffix",
                      "Value": ".json"
                    }
                  ]
                }
              }
            }
          ]
        }
      },
      "DependsOn": [
        "CreateCaptionsLambdaPermissionTranscribeS3"
      ]
    },
    "ExtractAudioLambdaPermissionVideoS3": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "ExtractAudioLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "s3.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:aws:s3:::prod-aws-captions-video-",
              {
                "Ref": "AWS::Region"
              },
              "-",
              {
                "Ref": "AWS::AccountId"
              }
            ]
          ]
        },
        "SourceAccount": {
          "Ref": "AWS::AccountId"
        }
      }
    },
    "TranscribeAudioLambdaPermissionAudioS3": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "TranscribeAudioLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "s3.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:aws:s3:::prod-aws-captions-audio-",
              {
                "Ref": "AWS::Region"
              },
              "-",
              {
                "Ref": "AWS::AccountId"
              }
            ]
          ]
        },
        "SourceAccount": {
          "Ref": "AWS::AccountId"
        }
      }
    },
    "CreateCaptionsLambdaPermissionTranscribeS3": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "CreateCaptionsLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "s3.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:aws:s3:::prod-aws-captions-transcribe-",
              {
                "Ref": "AWS::Region"
              },
              "-",
              {
                "Ref": "AWS::AccountId"
              }
            ]
          ]
        },
        "SourceAccount": {
          "Ref": "AWS::AccountId"
        }
      }
    },
    "ApiGatewayRestApi": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": "prod-aws-captions",
        "EndpointConfiguration": {
          "Types": [
            "REGIONAL"
          ]
        }
      }
    },
    "ApiGatewayResourceVideos": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "videos",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceVideo": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "video",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceVideoVideoidVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceVideo"
        },
        "PathPart": "{videoId}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceVideostatus": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "videostatus",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceVideostatusVideoidVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceVideostatus"
        },
        "PathPart": "{videoId}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceVideoname": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "videoname",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceVideonameVideoidVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceVideoname"
        },
        "PathPart": "{videoId}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceVideodescription": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "videodescription",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceVideodescriptionVideoidVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceVideodescription"
        },
        "PathPart": "{videoId}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceUpload": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "upload",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceUploadUploadfileVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceUpload"
        },
        "PathPart": "{uploadFile}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceCaption": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "caption",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceCaptionVideoidVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceCaption"
        },
        "PathPart": "{videoId}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceVocabulary": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "vocabulary",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceTweaks": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "tweaks",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodVideosOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Credentials": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'",
                "method.response.header.Access-Control-Allow-Credentials": "'false'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceVideos"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodVideoVideoidVarOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Credentials": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,PATCH,DELETE,GET'",
                "method.response.header.Access-Control-Allow-Credentials": "'false'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceVideoVideoidVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodVideostatusVideoidVarOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Credentials": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'",
                "method.response.header.Access-Control-Allow-Credentials": "'false'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceVideostatusVideoidVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodVideonameVideoidVarOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Credentials": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'",
                "method.response.header.Access-Control-Allow-Credentials": "'false'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceVideonameVideoidVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodVideodescriptionVideoidVarOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Credentials": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'",
                "method.response.header.Access-Control-Allow-Credentials": "'false'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceVideodescriptionVideoidVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodUploadUploadfileVarOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Credentials": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'",
                "method.response.header.Access-Control-Allow-Credentials": "'false'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceUploadUploadfileVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodCaptionVideoidVarOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Credentials": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,PUT'",
                "method.response.header.Access-Control-Allow-Credentials": "'false'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceCaptionVideoidVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodVocabularyOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Credentials": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,PUT,HEAD,GET'",
                "method.response.header.Access-Control-Allow-Credentials": "'false'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceVocabulary"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodTweaksOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Credentials": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,PUT,GET'",
                "method.response.header.Access-Control-Allow-Credentials": "'false'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceTweaks"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodVideosGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceVideos"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": true,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetVideosLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      }
    },
    "ApiGatewayMethodVideoVideoidVarGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceVideoVideoidVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": true,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetVideoLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      }
    },
    "ApiGatewayMethodVideostatusVideoidVarPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceVideostatusVideoidVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": true,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "UpdateVideoStatusLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      }
    },
    "ApiGatewayMethodVideonameVideoidVarPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceVideonameVideoidVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": true,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "UpdateVideoNameLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      }
    },
    "ApiGatewayMethodVideodescriptionVideoidVarPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceVideodescriptionVideoidVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": true,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "UpdateVideoDescriptionLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      }
    },
    "ApiGatewayMethodVideoVideoidVarDelete": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "DELETE",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceVideoVideoidVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": true,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "DeleteVideoLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      }
    },
    "ApiGatewayMethodVideoVideoidVarPatch": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "PATCH",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceVideoVideoidVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": true,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "ReprocessVideoLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      }
    },
    "ApiGatewayMethodUploadUploadfileVarGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceUploadUploadfileVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": true,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetUploadLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      }
    },
    "ApiGatewayMethodCaptionVideoidVarPut": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "PUT",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceCaptionVideoidVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": true,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "PutCaptionLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      }
    },
    "ApiGatewayMethodCaptionVideoidVarGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceCaptionVideoidVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": true,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetCaptionLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      }
    },
    "ApiGatewayMethodVocabularyGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceVocabulary"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": true,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetVocabularyLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      }
    },
    "ApiGatewayMethodVocabularyHead": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "HEAD",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceVocabulary"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": true,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "HeadVocabularyLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      }
    },
    "ApiGatewayMethodVocabularyPut": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "PUT",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceVocabulary"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": true,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "PutVocabularyLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      }
    },
    "ApiGatewayMethodTweaksGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceTweaks"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": true,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetTweaksLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      }
    },
    "ApiGatewayMethodTweaksPut": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "PUT",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceTweaks"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": true,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "PutTweaksLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      }
    },
    "ApiGatewayDeployment1550140467913": {
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "StageName": "prod"
      },
      "DependsOn": [
        "ApiGatewayMethodVideosOptions",
        "ApiGatewayMethodVideoVideoidVarOptions",
        "ApiGatewayMethodVideostatusVideoidVarOptions",
        "ApiGatewayMethodVideonameVideoidVarOptions",
        "ApiGatewayMethodVideodescriptionVideoidVarOptions",
        "ApiGatewayMethodUploadUploadfileVarOptions",
        "ApiGatewayMethodCaptionVideoidVarOptions",
        "ApiGatewayMethodVocabularyOptions",
        "ApiGatewayMethodTweaksOptions",
        "ApiGatewayMethodVideosGet",
        "ApiGatewayMethodVideoVideoidVarGet",
        "ApiGatewayMethodVideostatusVideoidVarPost",
        "ApiGatewayMethodVideonameVideoidVarPost",
        "ApiGatewayMethodVideodescriptionVideoidVarPost",
        "ApiGatewayMethodVideoVideoidVarDelete",
        "ApiGatewayMethodVideoVideoidVarPatch",
        "ApiGatewayMethodUploadUploadfileVarGet",
        "ApiGatewayMethodCaptionVideoidVarPut",
        "ApiGatewayMethodCaptionVideoidVarGet",
        "ApiGatewayMethodVocabularyGet",
        "ApiGatewayMethodVocabularyHead",
        "ApiGatewayMethodVocabularyPut",
        "ApiGatewayMethodTweaksGet",
        "ApiGatewayMethodTweaksPut"
      ]
    },
    "GetVideosLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetVideosLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": {
          "Fn::Join": [
            "",
            [
              "apigateway.",
              {
                "Ref": "AWS::URLSuffix"
              }
            ]
          ]
        },
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "GetVideoLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetVideoLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": {
          "Fn::Join": [
            "",
            [
              "apigateway.",
              {
                "Ref": "AWS::URLSuffix"
              }
            ]
          ]
        },
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "UpdateVideoStatusLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "UpdateVideoStatusLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": {
          "Fn::Join": [
            "",
            [
              "apigateway.",
              {
                "Ref": "AWS::URLSuffix"
              }
            ]
          ]
        },
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "UpdateVideoNameLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "UpdateVideoNameLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": {
          "Fn::Join": [
            "",
            [
              "apigateway.",
              {
                "Ref": "AWS::URLSuffix"
              }
            ]
          ]
        },
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "UpdateVideoDescriptionLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "UpdateVideoDescriptionLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": {
          "Fn::Join": [
            "",
            [
              "apigateway.",
              {
                "Ref": "AWS::URLSuffix"
              }
            ]
          ]
        },
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "DeleteVideoLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "DeleteVideoLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": {
          "Fn::Join": [
            "",
            [
              "apigateway.",
              {
                "Ref": "AWS::URLSuffix"
              }
            ]
          ]
        },
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "ReprocessVideoLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "ReprocessVideoLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": {
          "Fn::Join": [
            "",
            [
              "apigateway.",
              {
                "Ref": "AWS::URLSuffix"
              }
            ]
          ]
        },
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "GetUploadLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetUploadLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": {
          "Fn::Join": [
            "",
            [
              "apigateway.",
              {
                "Ref": "AWS::URLSuffix"
              }
            ]
          ]
        },
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "PutCaptionLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "PutCaptionLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": {
          "Fn::Join": [
            "",
            [
              "apigateway.",
              {
                "Ref": "AWS::URLSuffix"
              }
            ]
          ]
        },
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "GetCaptionLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetCaptionLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": {
          "Fn::Join": [
            "",
            [
              "apigateway.",
              {
                "Ref": "AWS::URLSuffix"
              }
            ]
          ]
        },
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "GetVocabularyLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetVocabularyLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": {
          "Fn::Join": [
            "",
            [
              "apigateway.",
              {
                "Ref": "AWS::URLSuffix"
              }
            ]
          ]
        },
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "HeadVocabularyLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "HeadVocabularyLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": {
          "Fn::Join": [
            "",
            [
              "apigateway.",
              {
                "Ref": "AWS::URLSuffix"
              }
            ]
          ]
        },
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "PutVocabularyLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "PutVocabularyLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": {
          "Fn::Join": [
            "",
            [
              "apigateway.",
              {
                "Ref": "AWS::URLSuffix"
              }
            ]
          ]
        },
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "GetTweaksLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetTweaksLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": {
          "Fn::Join": [
            "",
            [
              "apigateway.",
              {
                "Ref": "AWS::URLSuffix"
              }
            ]
          ]
        },
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "PutTweaksLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "PutTweaksLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": {
          "Fn::Join": [
            "",
            [
              "apigateway.",
              {
                "Ref": "AWS::URLSuffix"
              }
            ]
          ]
        },
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "LambdaLayer": {
      "Type": "AWS::Lambda::LayerVersion",
      "Properties": {
        "CompatibleRuntimes": [
          "nodejs8.10"
        ],
        "Content": {
          "S3Bucket": {
            "Fn::Join": [ "", [ "aws-captions-deployment-", { "Ref": "AWS::Region" } ] ]
          },
          "S3Key": "layers/aws-captions-node-sdk-layer.zip"
        },
        "Description": "Recent Node.js 8.10 AWS Node SDK",
        "LayerName": "prod-aws-captions-node-sdk-layer",
        "LicenseInfo": "Apache-2.0"
      }
    },
    "LambdaLayerPermission": {
      "Type": "AWS::Lambda::LayerVersionPermission",
      "Properties": {
        "Action": "lambda:GetLayerVersion",
        "LayerVersionArn": {
          "Ref": "LambdaLayer"
        },
        "Principal": {
          "Ref": "AWS::AccountId"
        }
      }
    },
    "MyCustomResource": {
      "Type": "Custom::CustomResource",
      "Version": "1.0",
      "DependsOn": [
        "CustomResourceLambdaFunction"
      ],
      "Properties": {
        "ServiceToken": {
          "Fn::Join": [
            ":",
            [
              "arn:aws:lambda",
              {
                "Ref": "AWS::Region"
              },
              {
                "Ref": "AWS::AccountId"
              },
              "function:prod-aws-captions-customresource"
            ]
          ]
        },
        "InputManifest": {
          "Bucket": {
            "Fn::Join": [ "", [ "aws-captions-deployment-", { "Ref": "AWS::Region" } ] ]
          },
          "Key": "web/manifest.json"
        },
        "WebDeploySource": {
          "Bucket": {
            "Fn::Join": [ "", [ "aws-captions-deployment-", { "Ref": "AWS::Region" } ] ]
          }
        },
        "WebDeployTarget": {
          "Bucket": {
            "Ref": "PublicBucket"
          },
          "Key": "web/"
        },
        "APIGateway": {
          "Url": {
            "Fn::Join": [
              "",
              [
                "https://",
                {
                  "Ref": "ApiGatewayRestApi"
                },
                ".execute-api.",
                {
                  "Ref": "AWS::Region"
                },
                ".amazonaws.com/",
                "prod"
              ]
            ]
          },
          "Id": {
            "Ref": "ApiGatewayRestApi"
          },
          "Stage": "prod",
          "PlanName": "prod-aws-captions-usageplan",
          "Key": {
            "Name": "prod-aws-captions-apikey",
            "Value": {
              "Ref": "APIKey"
            }
          }
        }
      }
    },
    "LambdaPolicy": {
      "Type": "AWS::IAM::ManagedPolicy",
      "Properties": {
        "ManagedPolicyName": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "AWS::StackName"
              },
              "-prod-aws-captions-lambda-policy"
            ]
          ]
        },
        "Description": "Managed policy for lambdas",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "apigateway:*"
              ],
              "Resource": [
                "*"
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "lambda:InvokeFunction"
              ],
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:lambda:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":function:prod-aws-captions-extractaudio"
                    ]
                  ]
                }
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:PutLogEvents"
              ],
              "Resource": [
                {
                  "Fn::Join": [
                    ":",
                    [
                      "arn:aws:logs",
                      {
                        "Ref": "AWS::Region"
                      },
                      {
                        "Ref": "AWS::AccountId"
                      },
                      "log-group:/aws/lambda/*:*:*"
                    ]
                  ]
                }
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "dynamodb:Scan",
                "dynamodb:GetItem",
                "dynamodb:PutItem",
                "dynamodb:Query",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem"
              ],
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "VideoDynamoDBTable",
                    "Arn"
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "VideoDynamoDBTable",
                          "Arn"
                        ]
                      },
                      "/index/*"
                    ]
                  ]
                },
                {
                  "Fn::GetAtt": [
                    "CaptionDynamoDBTable",
                    "Arn"
                  ]
                },
                {
                  "Fn::GetAtt": [
                    "ConfigDynamoDBTable",
                    "Arn"
                  ]
                }
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "elastictranscoder:CreatePipeline",
                "elastictranscoder:Read*",
                "elastictranscoder:List*",
                "elastictranscoder:*Job",
                "elastictranscoder:*Preset"
              ],
              "Resource": [
                "*"
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "transcribe:CreateVocabulary",
                "transcribe:UpdateVocabulary",
                "transcribe:StartTranscriptionJob",
                "transcribe:ListVocabularies",
                "transcribe:DeleteTranscriptionJob"
              ],
              "Resource": [
                "*"
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "s3:GetObject"
              ],
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:s3:::aws-captions-deployment-",
                      {
                        "Ref": "AWS::Region"
                      }
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:s3:::aws-captions-deployment-",
                      {
                        "Ref": "AWS::Region"
                      },
                      "/*"
                    ]
                  ]
                }
              ]
            },           
            {
              "Effect": "Allow",
              "Action": [
                "s3:*"
              ],
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:s3:::prod-aws-captions-video-",
                      {
                        "Ref": "AWS::Region"
                      },
                      "-",
                      {
                        "Ref": "AWS::AccountId"
                      }
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:s3:::prod-aws-captions-video-",
                      {
                        "Ref": "AWS::Region"
                      },
                      "-",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      "/*"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:s3:::prod-aws-captions-audio-",
                      {
                        "Ref": "AWS::Region"
                      },
                      "-",
                      {
                        "Ref": "AWS::AccountId"
                      }
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:s3:::prod-aws-captions-audio-",
                      {
                        "Ref": "AWS::Region"
                      },
                      "-",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      "/*"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:s3:::prod-aws-captions-transcribe-",
                      {
                        "Ref": "AWS::Region"
                      },
                      "-",
                      {
                        "Ref": "AWS::AccountId"
                      }
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:s3:::prod-aws-captions-transcribe-",
                      {
                        "Ref": "AWS::Region"
                      },
                      "-",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      "/*"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:s3:::prod-aws-captions-public-",
                      {
                        "Ref": "AWS::Region"
                      },
                      "-",
                      {
                        "Ref": "AWS::AccountId"
                      }
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:s3:::prod-aws-captions-public-",
                      {
                        "Ref": "AWS::Region"
                      },
                      "-",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      "/*"
                    ]
                  ]
                }
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "iam:PassRole"
              ],
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:iam::",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":role/",
                      {
                        "Ref": "AWS::StackName"
                      },
                      "-prod-aws-captions-elastic-transcoder-role"
                    ]
                  ]
                }
              ]
            }
          ]
        }
      }
    },
    "LambdaRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "RoleName": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "AWS::StackName"
              },
              "-prod-aws-captions-lambda-role"
            ]
          ]
        },
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "ManagedPolicyArns": [
          {
            "Ref": "LambdaPolicy"
          },
          "arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"
        ]
      }
    },
    "TrancoderPolicy": {
      "Type": "AWS::IAM::ManagedPolicy",
      "Properties": {
        "ManagedPolicyName": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "AWS::StackName"
              },
              "-prod-aws-captions-elastic-transcoder-policy"
            ]
          ]
        },
        "Description": "Managed policy for invoking Elastic Trancoder",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "s3:Put*",
                "s3:ListBucket",
                "s3:*MultipartUpload*",
                "s3:Get*"
              ],
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:s3:::prod-aws-captions-video-",
                      {
                        "Ref": "AWS::Region"
                      },
                      "-",
                      {
                        "Ref": "AWS::AccountId"
                      }
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:s3:::prod-aws-captions-video-",
                      {
                        "Ref": "AWS::Region"
                      },
                      "-",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      "/*"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:s3:::prod-aws-captions-audio-",
                      {
                        "Ref": "AWS::Region"
                      },
                      "-",
                      {
                        "Ref": "AWS::AccountId"
                      }
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:s3:::prod-aws-captions-audio-",
                      {
                        "Ref": "AWS::Region"
                      },
                      "-",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      "/*"
                    ]
                  ]
                }                
              ]
            },
            {
              "Effect": "Allow",
              "Action": "sns:Publish",
              "Resource": "*"
            }
          ]
        }
      }
    },
    "TranscoderRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "RoleName": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "AWS::StackName"
              },
              "-prod-aws-captions-elastic-transcoder-role"
            ]
          ]
        },
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "elastictranscoder.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "ManagedPolicyArns": [
          {
            "Ref": "TrancoderPolicy"
          }
        ]
      }
    },
    "PublicBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketName": {
          "Fn::Join": [
            "",
            [
              "prod-aws-captions-public-",
              {
                "Ref": "AWS::Region"
              },
              "-",
              {
                "Ref": "AWS::AccountId"
              }
            ]
          ]
        },
        "CorsConfiguration": {
          "CorsRules": [
            {
              "AllowedOrigins": [
                "*"
              ],
              "AllowedHeaders": [
                "*"
              ],
              "AllowedMethods": [
                "GET"
              ],
              "MaxAge": 3000
            }
          ]
        }
      }
    },
    "VideoDynamoDBTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "TableName": "prod-aws-captions-videos",
        "AttributeDefinitions": [
          {
            "AttributeName": "videoId",
            "AttributeType": "S"
          },
          {
            "AttributeName": "s3VideoPath",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "videoId",
            "KeyType": "HASH"
          }
        ],
        "BillingMode": "PAY_PER_REQUEST",
        "GlobalSecondaryIndexes": [
          {
            "IndexName": "s3VideoPathIndex",
            "KeySchema": [
              {
                "AttributeName": "s3VideoPath",
                "KeyType": "HASH"
              },
              {
                "AttributeName": "videoId",
                "KeyType": "RANGE"
              }
            ],
            "Projection": {
              "ProjectionType": "ALL"
            }
          }
        ]
      }
    },
    "ConfigDynamoDBTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "TableName": "prod-aws-captions-config",
        "AttributeDefinitions": [
          {
            "AttributeName": "configId",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "configId",
            "KeyType": "HASH"
          }
        ],
        "BillingMode": "PAY_PER_REQUEST"
      }
    },
    "CaptionDynamoDBTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "TableName": "prod-aws-captions-captions",
        "AttributeDefinitions": [
          {
            "AttributeName": "videoId",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "videoId",
            "KeyType": "HASH"
          }
        ],
        "BillingMode": "PAY_PER_REQUEST"
      }
    }
  },
  "Outputs": {
    "Website": {
      "Description": "Link to the public website",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://s3.",
            {
              "Ref": "AWS::Region"
            },
            ".amazonaws.com/",
            "prod-aws-captions-public-",
            {
              "Ref": "AWS::Region"
            },
            "-",
            {
              "Ref": "AWS::AccountId"
            },
            "/index.html"
          ]
        ]
      },
      "Export": {
        "Name": "prod-aws-captions-website"
      }
    },
    "APIKey": {
      "Description": "API Key to use when accessing the site",
      "Value": {
        "Ref": "APIKey"
      },
      "Export": {
        "Name": "prod-aws-captions-apikey"
      }
    }
  },
  "Parameters": {
    "TranscribeLanguage": {
      "Type": "String",
      "AllowedValues": [
        "en-AU",
        "en-US",
        "en-GB",
        "es-US",
        "de-DE",
        "pt-BR",
        "fr-CA",
        "fr-FR",
        "it-IT"
      ],
      "Default": "en-AU",
      "Description": "The language that Transcribe uses"
    },
    "APIKey": {
      "Type": "String",
      "AllowedPattern": "[a-zA-Z0-9]{20,70}",
      "ConstraintDescription": "must only contain letters (uppercase and lowercase) and numbers min length: 20 max length: 70",
      "Default": "JustAnApiKeyJustAnApiKey",
      "Description": "An API key to use for accessing the website"
    },
    "Trace": {
      "Type": "String",
      "AllowedValues": [
        "Active",
        "PassThrough"
      ],
      "Default": "PassThrough",
      "Description": "Select Active to enable X-Ray tracing"
    }
  }
}